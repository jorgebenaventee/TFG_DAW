// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.Uuid
  username  String      @unique @db.VarChar(50)
  password  String      @db.VarChar(255)
  UserBoard UserBoard[]
  Comment   Comment[]
  UserTask  UserTask[]
}

model Board {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @db.VarChar(50)
  UserBoard UserBoard[]
  Column    Column[]
  Tag       Tag[]
}

model Column {
  id      String @id @default(uuid()) @db.Uuid
  name    String @db.VarChar(255)
  Board   Board  @relation(fields: [boardId], references: [id])
  boardId String @db.Uuid
  Task    Task[]
}

model Task {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @db.VarChar(255)
  description String     @db.Text
  columnId    String     @db.Uuid
  imagePath   String?    @db.VarChar(255)
  startDate   DateTime?  @db.Timestamptz
  endDate     DateTime?  @db.Timestamptz
  Column      Column     @relation(fields: [columnId], references: [id])
  Comment     Comment[]
  UserTask    UserTask[]
  TaskTag     TaskTag[]
}

model Tag {
  id      String    @id @default(uuid()) @db.Uuid
  name    String    @db.VarChar(255)
  color   String    @db.VarChar(7)
  boardId String    @db.Uuid
  board   Board     @relation(fields: [boardId], references: [id])
  TaskTag TaskTag[]
}

model TaskTag {
  taskId String @db.Uuid
  tagId  String @db.Uuid
  Task   Task   @relation(fields: [taskId], references: [id])
  Tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId])
}

model UserTask {
  userId String @db.Uuid
  taskId String @db.Uuid
  User   User   @relation(fields: [userId], references: [id])
  Task   Task   @relation(fields: [taskId], references: [id])

  @@id([userId, taskId])
}

model Comment {
  id     String @id @default(uuid()) @db.Uuid
  text   String @db.Text
  taskId String @db.Uuid
  userId String @db.Uuid
  User   User   @relation(fields: [userId], references: [id])
  Task   Task   @relation(fields: [taskId], references: [id])
}

model UserBoard {
  userId  String        @db.Uuid
  boardId String        @db.Uuid
  role    UserBoardRole @default(USER)
  User    User          @relation(fields: [userId], references: [id])
  Board   Board         @relation(fields: [boardId], references: [id])

  @@id([userId, boardId])
}

enum UserBoardRole {
  USER
  ADMIN
}
